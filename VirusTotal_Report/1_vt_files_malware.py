import requests
import os
import hashlib
import random
import json
import pandas as pd


proxy = ""
os.environ['HTTP_PROXY'] = proxy
os.environ['HTTPS_PROXY'] = proxy
# url = "https://www.virustotal.com/api/v3/files"

print("HTTP_PROXY:", os.getenv("HTTP_PROXY"))
print("HTTPS_PROXY:", os.getenv("HTTPS_PROXY"))
url = "https://www.virustotal.com/api/v3/files"

apikey = ""

def get_file_sha256(file_path: str) -> str:
    with open(file_path, "rb") as f:
        file_data = f.read()
        sha256 = hashlib.sha256(file_data).hexdigest()
    return sha256

def upload_file(file_path: str) -> str:
    files = { "file": (os.path.basename(file_path), open(file_path, "rb"), "application/x-msdownload") }
    headers = {
        "accept": "application/json",
        "x-apikey": apikey,
    }
    response = requests.post(url, files=files, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return data["data"]["id"]
    else:
        return None

def get_file_report(file_sha256: str) -> dict:
    url = f"https://www.virustotal.com/api/v3/files/{file_sha256}"

    headers = {
        "accept": "application/json",
        "x-apikey": apikey
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"get VT report error : {response.text}")
        return None

def get_folder_files(folder_path: str) -> list:
    files = [os.path.join(folder_path, f) for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
    return files


def extract_files_report(folder,num,json_folder=None)->dict:
    files = get_folder_files(folder)
    index = 0
    folder_file_dict = {
        "file_path": [],
        "mal_type":[],
        "sha256": [],
        "malicious": [],
        "suspicious": [],
        "undetected": [],
        "last_submission_date": []
    }
    while index < 10:
        try:
            # Randomly select a file from files
            file = random.choice(files)
            files.remove(file)
            sha256 = get_file_sha256(file)
            resport_dict = get_file_report(sha256)
            if resport_dict != None:
                folder_file_dict["file_path"].append(file)
                folder_file_dict["mal_type"].append(os.path.basename(os.path.dirname(file)))
                folder_file_dict["sha256"].append(sha256)
                folder_file_dict["malicious"].append(resport_dict["data"]["attributes"]["last_analysis_stats"]["malicious"])
                folder_file_dict["suspicious"].append(resport_dict["data"]["attributes"]["last_analysis_stats"]["suspicious"])
                folder_file_dict["undetected"].append(resport_dict["data"]["attributes"]["last_analysis_stats"]["undetected"])
                folder_file_dict["last_submission_date"].append(resport_dict["data"]["attributes"]["last_submission_date"])

                # print(f'folder_file_dict: {folder_file_dict}')
            
            resport_dict
            
            # write report_dict to json file, named by sha256
            if json_folder is not None:
                if not os.path.exists(json_folder):
                    os.makedirs(json_folder)
                with open(os.path.join(json_folder,f"{sha256}.json"), "w", encoding="utf-8") as f:
                    json.dump(resport_dict, f, ensure_ascii=False, indent=4)
        except Exception as e:
            print(f"get_file_csv error: {e}")
            continue
        index += 1
    return folder_file_dict


def get_file_csv(folder:str,out_csv:str)->dict:
    child_folder = [os.path.join(folder, f) for f in os.listdir(folder) if os.path.isdir(os.path.join(folder, f))]
    out_json_folder = "malware_example_json"
    all_file_info = {
        "file_path": [],
        "mal_type":[],
        "sha256": [],
        "malicious": [],
        "suspicious": [],
        "undetected": [],
        "last_submission_date": []
    }
    df = pd.DataFrame(all_file_info)
    for dir in child_folder:
        folder_file_dict = extract_files_report(dir,20,out_json_folder)
        df = pd.concat([df,pd.DataFrame(folder_file_dict)],axis=0)
        
    df["malicious"] = df["malicious"].astype(int)
    df["suspicious"] = df["suspicious"].astype(int)
    df["undetected"] = df["undetected"].astype(int)
    df["last_submission_date"] = df["undetected"].astype(int) # pd.to_datetime(df["last_submission_date"])
    df.to_csv(out_csv,index=False)


if __name__ == "__main__":
    folder = "E:\\pe32example\\datasets_test_3500"
    out_csv = "malware_example1.csv"
    get_file_csv(folder,out_csv)
